{"critical":[{"cwe_ids":["95"],"id":"php_lang_eval_using_user_input","title":"Unsanitized user input in 'eval' type function","description":"## Description\nIt is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to command injection.\n\n## Remediations\n❌ Avoid using code execution methods with unsanitized user input.\n\n## Resources\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)\n","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_eval_using_user_input","line_number":13,"full_filename":"data\\repository\\30e495cfa4b2454789ba5d19184e2e9e\\main/SAST\\php\\reflection-injection.php","filename":"SAST\\php\\reflection-injection.php","source":{"start":13,"end":13,"column":{"start":1,"end":30}},"sink":{"start":13,"end":13,"column":{"start":1,"end":30},"content":""},"parent_line_number":13,"fingerprint":"418cd911efd16f058c3e00389c84fa60_0","old_fingerprint":"f45a55bb22495f11e0a5cb07a28271ea_0","code_extract":"call_user_func($input, \"abc\"); # Noncompliant"},{"cwe_ids":["78"],"id":"php_lang_exec_using_user_input","title":"Unsanitized user input in OS command","description":"## Description\n\nApplications should not execute OS commands that are formed from user input.\nThis rule checks for external commands containing user-supplied data.\n\n## Remediations\n\n❌ Avoid using user input when executing commands:\n\n```php\nexec($_GET[\"command\"]);\n```\n\n✅ Use user input indirectly when executing commands:\n\n```php\nif ($_GET[\"action\"] == \"option1\") {\n  $command = \"command1\";\n} else {\n  $command = \"command2\";\n}\n\nexec($command);\n```\n\n## Resources\n- [OWASP OS command injection cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_exec_using_user_input","line_number":14,"full_filename":"data\\repository\\30e495cfa4b2454789ba5d19184e2e9e\\main/SAST\\php\\basic-collection.php","filename":"SAST\\php\\basic-collection.php","source":{"start":14,"end":14,"column":{"start":1,"end":55}},"sink":{"start":14,"end":14,"column":{"start":1,"end":55},"content":""},"parent_line_number":14,"fingerprint":"e167a6a239195541c4c6adf2f1d71776_0","old_fingerprint":"97cb13acd72f07561ad749d1ddf84ecf_0","code_extract":"exec(\"cat /var/log/apache2/access.log | grep \" . $cmd);"}],"high":[{"cwe_ids":["79"],"id":"javascript_lang_dangerous_insert_html","title":"Unsanitized user input in dynamic HTML insertion (XSS)","description":"## Description\nThere are XSS vulnerabilities when dynamically inserting HTML that contains unsanitized data.\n\n## Remediations\nMake sure you use HTML sanitization library before inserting html\n\n```javascript\nimport sanitizeHtml from 'sanitize-html';\n\nconst html = `\u003cstrong\u003e${user.Input}\u003c/strong\u003e`;\ndocument.body.innerHTML = sanitizeHtml(html)\n```\n\n## Resources\n- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_dangerous_insert_html","line_number":9,"full_filename":"data\\repository\\30e495cfa4b2454789ba5d19184e2e9e\\main/SAST\\typescript\\dom-xss.js","filename":"SAST\\typescript\\dom-xss.js","source":{"start":9,"end":9,"column":{"start":1,"end":25}},"sink":{"start":9,"end":9,"column":{"start":1,"end":25},"content":""},"parent_line_number":9,"fingerprint":"24f5e9496f0d94eb78967c20f1a76051_0","old_fingerprint":"cbe46a9aece6a79128572c20cdb656f5_0","code_extract":"rootEl.innerHTML = input; // Noncompliant"},{"cwe_ids":["79"],"id":"php_lang_raw_output_using_user_input","title":"Unsanitized user input in 'echo' function (XSS)","description":"## Description\n\nApplications should not include unsanitized user input in responses. This\ncan allow cross-site scripting (XSS) attacks.\n\n## Remediations\n\n❌ Avoid including user input directly in the response:\n\n```ruby\necho \"\u003ch1\u003e\" . $_GET[\"title\"] . \"\u003c/h1\u003e\"\n```\n\n✅ Sanitize user input when including it in a response:\n\n```ruby\necho \"\u003ch1\u003e\" . filter_var($_GET[\"title\"], FILTER_SANITIZE_STRING). \"\u003c/h1\u003e\"\n```\n\n## Resources\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_output_using_user_input","line_number":6,"full_filename":"data\\repository\\30e495cfa4b2454789ba5d19184e2e9e\\main/SAST\\php\\basic-collection.php","filename":"SAST\\php\\basic-collection.php","source":{"start":6,"end":6,"column":{"start":1,"end":24}},"sink":{"start":6,"end":6,"column":{"start":1,"end":24},"content":""},"parent_line_number":6,"fingerprint":"5dc73fd7d28c973fcb08d9c7ecb1f870_0","old_fingerprint":"79d62ac48fed8e4861f78f97fc8f615c_0","code_extract":"echo('Hello ' . $name);"},{"cwe_ids":["79"],"id":"php_lang_raw_output_using_user_input","title":"Unsanitized user input in 'echo' function (XSS)","description":"## Description\n\nApplications should not include unsanitized user input in responses. This\ncan allow cross-site scripting (XSS) attacks.\n\n## Remediations\n\n❌ Avoid including user input directly in the response:\n\n```ruby\necho \"\u003ch1\u003e\" . $_GET[\"title\"] . \"\u003c/h1\u003e\"\n```\n\n✅ Sanitize user input when including it in a response:\n\n```ruby\necho \"\u003ch1\u003e\" . filter_var($_GET[\"title\"], FILTER_SANITIZE_STRING). \"\u003c/h1\u003e\"\n```\n\n## Resources\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_output_using_user_input","line_number":16,"full_filename":"data\\repository\\30e495cfa4b2454789ba5d19184e2e9e\\main/SAST\\php\\sql-injection.php","filename":"SAST\\php\\sql-injection.php","source":{"start":16,"end":16,"column":{"start":5,"end":20}},"sink":{"start":16,"end":16,"column":{"start":5,"end":20},"content":""},"parent_line_number":16,"fingerprint":"44758acaf3dd7942f469629768655f7a_0","old_fingerprint":"c205f352216ce8414ec5eb3eb86975d6_1","code_extract":"    echo $employee;"},{"cwe_ids":["98"],"id":"php_lang_reflection_using_user_input","title":"Unsanitized user input in code generation","description":"## Description\n\nApplications should not look up or manipulate code using user-supplied data.\n\n## Remediations\n\n❌ Avoid using user input when using reflection:\n\n```php\n$class = new ReflectionClass($_GET[\"class\"])\n```\n\n## Resources\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)\n","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_reflection_using_user_input","line_number":14,"full_filename":"data\\repository\\30e495cfa4b2454789ba5d19184e2e9e\\main/SAST\\php\\reflection-injection.php","filename":"SAST\\php\\reflection-injection.php","source":{"start":14,"end":14,"column":{"start":1,"end":9}},"sink":{"start":14,"end":14,"column":{"start":1,"end":9},"content":""},"parent_line_number":14,"fingerprint":"f8cb7c907940379d80f824f131b50c4f_0","old_fingerprint":"4d3eba7b5f57976cdd03ff2ff87f22dd_0","code_extract":"$input(); # Noncompliant"}],"low":[{"cwe_ids":["330"],"id":"javascript_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```javascript\nconst crypto = require('crypto');\ncrypto.randomBytes(16).toString('hex');\n```\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_insufficiently_random_values","line_number":3,"full_filename":"data\\repository\\30e495cfa4b2454789ba5d19184e2e9e\\main/SAST\\typescript\\Insecure-Random-Number-Generation.ts","filename":"SAST\\typescript\\Insecure-Random-Number-Generation.ts","source":{"start":3,"end":3,"column":{"start":24,"end":37}},"sink":{"start":3,"end":3,"column":{"start":24,"end":37},"content":""},"parent_line_number":3,"fingerprint":"1c89ac1b73ed96eaa636ee6716e270fd_0","old_fingerprint":"cf12fc025bbb69ff5320d1cf1e21d3ad_0","code_extract":"const insecureRandom = Math.random();"},{"cwe_ids":["532"],"id":"javascript_lang_logger_leak","title":"Leakage of information in logger message","description":"## Description\n\nLeaking data to loggers is a common cause of data leaks and can lead to data breaches. This rule looks for instances of data sent to loggers.\n\n## Remediations\n\n❌ Avoid using data in logger messages:\n\n```javascript\nlogger.info(`Results: ${data}`)\n```\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_logger_leak","line_number":2,"full_filename":"data\\repository\\30e495cfa4b2454789ba5d19184e2e9e\\main/SAST\\javascript\\sample.js","filename":"SAST\\javascript\\sample.js","source":{"start":2,"end":2,"column":{"start":5,"end":50}},"sink":{"start":2,"end":2,"column":{"start":5,"end":50},"content":""},"parent_line_number":2,"fingerprint":"e02431802d06361c65a9f36ef8647d9b_0","old_fingerprint":"8e2394dd8e1f815b209bf54f9328d529_0","code_extract":"    console.log(\"Received password: \" + password);"},{"cwe_ids":["532"],"id":"javascript_lang_logger_leak","title":"Leakage of information in logger message","description":"## Description\n\nLeaking data to loggers is a common cause of data leaks and can lead to data breaches. This rule looks for instances of data sent to loggers.\n\n## Remediations\n\n❌ Avoid using data in logger messages:\n\n```javascript\nlogger.info(`Results: ${data}`)\n```\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_logger_leak","line_number":4,"full_filename":"data\\repository\\30e495cfa4b2454789ba5d19184e2e9e\\main/SAST\\typescript\\Insecure-Random-Number-Generation.ts","filename":"SAST\\typescript\\Insecure-Random-Number-Generation.ts","source":{"start":4,"end":4,"column":{"start":1,"end":57}},"sink":{"start":4,"end":4,"column":{"start":1,"end":57},"content":""},"parent_line_number":4,"fingerprint":"e5cfa72fa5fbedbbfb9b61f5c8f8a701_0","old_fingerprint":"3542a9ab008258e043f832c5dff6988b_1","code_extract":"console.log(`Insecure random number: ${insecureRandom}`);"}]}
